Teremos n * 𝚯(n²), comparatações, no toltal seria : 𝚯(n³)

------------------------- Exercício resolvido (8): -------------------------
Caso execute apenas uma pesquisa sequencial, seriam feitas \(n\) comparações.

Ao executar a ordenação do array e em seguida uma pesquisa binária, serão feitas \(n \cdot \lg(n) + \lg(n)\) comparações.

Como é apenas procurar um elemento, é melhor realizar a pesquisa sequencial.

------------------------- Exercício resolvido (9): -------------------------
a) Falso\
b) Verdadeiro\
c) Verdadeiro\
d) Verdadeiro\
e) Verdadeiro\
f) Falso\
g) Falso\
h) Verdadeiro\
i) Falso

------------------------- Exercício resolvido (10): -------------------------
Teremos n * 𝚯(n²), comparatações, no toltal seria : 𝚯(n³)

------------------------- Exercício resolvido (11): -------------------------
	a) h(n) + g(n) - f(n)		-	𝚯(n⁸)
	b) 𝚯(h(n)) + 𝚯(g(n)) - 𝚯(f(n))	-	𝚯(n⁸)
	c) f(n) x g(n)			-	𝚯(n³ * lg(n))
	d) g(n) x l(n) + h(n)		-	𝚯(n⁸)
	e) f(n) x g(n) x l(n)		-	𝚯(n⁴ * lg³(n))
	f) 𝚯(𝚯(𝚯(𝚯(f(n)))))		-	𝚯(n)

------------------------- Exercício resolvido (12): -------------------------
	a) Os valores são : c = 4 e m = 5,2
	b) Os valores são : ( c = 4 e m = 5,2 ) e ( c = 5 e m = 2,7 )
	c) Não existe par (c, m) tal que para n ≥ m, |3n2 + 5n +1| ≤ c x |n| seja  verdadeira. Aumentando o valor de c, apenas retardamos o momento em que a curva quadrática supera a linear

------------------------- Exercício resolvido (13): -------------------------
	Função de Complexidade para Comparações : 
		Pior 	- 	f(n) = 1 + 2(n-2)
		Melhor 	- 	f(n) = 1 + (n - 2)	

	Ordem de Complexidade para Comparações  :
		Pior 	-	O(n), Ω(n) e 𝚯(n)
		Melhor 	-	O(n), Ω(n) e 𝚯(n)
------------------------- Exercício resolvido (14): -------------------------
	Função de Complexidade para Movimentações : 
		Pior 	-	f(n) = 2 + (n - 2)
		Melhor 	-	f(n) = 2 + (n - 2) * 0

	Ordem de Complexidade para Movimentações  :
		Pior 	-	O(n), Ω(n) e 𝚯(n)
		Melhor 	-	O(1), Ω(1) e 𝚯(1)

------------------------- Exercício resolvido (15): -------------------------
	Função de Complexidade 	:
		Pior 	-	f(n) = n + 2
		Melhor 	-	f(n) = n + 1

	Ordem de Complexidade 	:	
		Pior 	-	O(n), Ω(n) e 𝚯(n)
		Melhor 	-	O(n), Ω(n) e 𝚯(n)

------------------------- Exercício resolvido (16): -------------------------
	Função de Complexidade 	:
		Pior	-	f(n) = (2n + 1)n
		Melhor 	-	f(n) = (2n + 1)n
	
	Ordem de Complexidade	:
		Pior 	-	O(n2), Ω(n2) e 𝚯(n2)
		Melhor	-	O(n2), Ω(n2) e 𝚯(n2)

------------------------- Exercício resolvido (17): -------------------------
	Função de Complexidade 	:
		Pior 	-	f(n) = ( lg(n) + 1) x n = n x lg(n) + n
		Melhor 	-	f(n) = ( lg(n) + 1) x n = n x lg(n) + n

	Ordem de Complexidade	:
		Pior	-	O(n x lg(n)), Ω(n x lg(n)) e 𝚯(n x lg(n))
		Melhor 	-	O(n x lg(n)), Ω(n x lg(n)) e 𝚯(n x lg(n))

------------------------- Exercício resolvido (18): -------------------------
- Contante: 3n
- Linear: n
- Polinomial: 3/2)n
- Exponencial: 2^{n^3}
- Exponencial: 2^n
- Polinomial: 3n^3
- Contante: 1000
- Exponencial: (3/2)^n

------------------------- Exercício resolvido (19): -------------------------
f6(n) = 1 < f2(n) = n < f1(n) = n² < f5(n) = n³ < f4(n) = (3/2)^n < f3(n) = 2^n

------------------------- Exercício resolvido (20): -------------------------
f6(n) = 64 < f3(n) = log8(n) < f2(n) = lg(n) < f9(n) = 4n < f1(n) = n.log6(n) < f5(n) = n.lg(n) < f4(n) = 8n² < f7(n) = 6n³ < f8(n) = 8^2n	

------------------------- Exercício resolvido (21): -------------------------
	f(n)			g(n)

	n + 30			3n - 1
	n² + 2n - 10		n² + 3n
	n³ * 3n			n⁴
	lg(n)			lg(2n)


Exercício 1:

Maior - 𝚯(n)
Menor - 𝚯(n)

Exercício 2:

Exercício 3:

𝚯(1) 𝚯(lg n) 𝚯(n) 𝚯(n * lg(n)) 𝚯(n²) 𝚯(n³) 𝚯(n⁵) 𝚯(n²⁰)
f(n) = lg(n) X
f(n) = n * lg(n) X
f(n) = 5n + 1 X
f(n) = 7n⁵ - 3n² X
f(n) = 99n³ - 1000n² X
f(n) = n⁵ - 99999n⁴ X

Exercício 4:

O(1) O(lg n) O(n) O(n * lg(n)) O(n²) O(n³) O(n⁵) O(n²⁰)
f(n) = lg(n) X X
f(n) = n * lg(n) X X
f(n) = 5n + 1 X X
f(n) = 7n⁵ - 3n² X X
f(n) = 99n³ - 1000n² X X
f(n) = n⁵ - 99999n⁴ X X

Exercício 5:

Ω(1) Ω(lg n) Ω(n) Ω(n * lg(n)) Ω(n²) Ω(n³) Ω(n⁵) Ω(n²⁰)
f(n) = lg(n) X X
f(n) = n * lg(n) X X
f(n) = 5n + 1 X X
f(n) = 7n⁵ - 3n² X X
f(n) = 99n³ - 1000n² X X
f(n) = n⁵ - 99999n⁴ X X

Exercício 6:

a) Valor de c = 2 e m = 1
b) Valor de c = 1 e m = 1
d) Conforme o n tende ao infinito, os termos (3/n), (3/n²), (1/n³) vão para 0.

Exercício 7:

a) Valor de c1 = 1/4, c2 = 5, m = 1
b) Conforme o n tende ao infinito, não importa o quão grande o c1 e c2 é, a expressão crescerá mais rápido do que c1 e c2.
c) Conforme o n tende ao infinito, não importa o quão grande o c1 e c2 é, a expressão crescerá mais rápido do que c1 e c2.

Exercício 8:

a) Melhor: f(n) = 𝚯(1)
Pior: f(n) = 𝚯(n)

b) Melhor: f(n) = 𝚯(1)
Pior: f(n) = 𝚯(n)

Exercício 9:


void teste() {
    for (int i = 0; i < n; i++) {
        if (a > n) {
            i++;
            a--;
        } else {
            n--;
            a++;
        }
    }
}

Melhor: f(n) = 𝚯(1)
Pior: f(n) = 𝚯(n)

Exercício 10:

A busca de seleção binária só valeria se a quantidade de elementos que eu for buscar for maior do que o log de n.
